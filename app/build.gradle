apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "io.github.hidroh.calendar"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "FORECAST_IO_API_KEY", "\"97b232a76771e4bd5fcd985da278ac0d\""
    }

    lintOptions {
        htmlReport false
        xmlReport false
        textReport true
        warningsAsErrors true
        abortOnError true
        explainIssues false
        absolutePaths false
        ignore "InvalidPackage" // square/okio#58
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
        maxHeapSize = '2048m'
        maxParallelForks = 1
        forkEvery = 1
        jacoco {
            includeNoLocationClasses = true
        }
    }
    testOptions.unitTests.includeAndroidResources true
}

ext {
    supportVersion = '26.1.0'
    retrofit2Version = '2.0.0'
    robolectricVersion = '3.0'
    assertjVersion = '1.1.1'
}

dependencies {
    implementation "com.android.support:appcompat-v7:$supportVersion",
            "com.android.support:recyclerview-v7:$supportVersion",
            "com.android.support:design:$supportVersion",
            "com.squareup.retrofit2:retrofit:$retrofit2Version",
            "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    testImplementation "org.robolectric:robolectric:$robolectricVersion",
            "org.robolectric:shadows-support-v4:$robolectricVersion",
            'org.mockito:mockito-core:1.9.5+',
            'junit:junit:4.12'
    testImplementation("com.squareup.assertj:assertj-android:$assertjVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/coverage")
    }

    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"
    sourceDirectories = files android.sourceSets.main.java.srcDirs
    classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/debug",
            exclude: [ '**/R.class', '**/R$*.class' ])

    doLast {
        println "coveralls report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        println "coverage report generated at file://${reports.html.destination}/index.html"
    }
}